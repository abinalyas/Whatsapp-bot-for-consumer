/**
 * Business Configuration API Routes
 * Handles tenant business configuration, business types, and templates
 */

import { Router } from 'express';
import { z } from 'zod';
import { TenantBusinessConfigService } from '../services/tenant-business-config.service';
import { BusinessTypeService } from '../services/business-type.service';
import { jwtAuthMiddleware } from '../middleware/jwt-auth.middleware';
import { tenantContextMiddleware } from '../middleware/tenant-context.middleware';
import { rbacMiddleware } from '../middleware/rbac.middleware';

const router = Router();

// Initialize services
const getConnectionString = () => process.env.DATABASE_URL!;
let configService: TenantBusinessConfigService;
let businessTypeService: BusinessTypeService;

// Initialize services on first use
const initServices = () => {
  if (!configService) {
    configService = new TenantBusinessConfigService(getConnectionString());
  }
  if (!businessTypeService) {
    businessTypeService = new BusinessTypeService(getConnectionString());
  }
};

// Validation schemas
const setupBusinessTypeSchema = z.object({
  businessTypeId: z.string().min(1, 'Business type ID is required'),
  customTerminology: z.record(z.string()).optional(),
  customConfiguration: z.record(z.any()).optional(),
});\n\nconst updateTerminologySchema = z.object({\n  terminology: z.record(z.string()),\n});\n\nconst createCustomFieldSchema = z.object({\n  entityType: z.enum(['offering', 'transaction', 'customer']),\n  name: z.string().min(1, 'Field name is required'),\n  label: z.string().min(1, 'Field label is required'),\n  fieldType: z.enum(['text', 'number', 'date', 'boolean', 'select', 'multiselect', 'file']),\n  isRequired: z.boolean(),\n  validationRules: z.record(z.any()).optional(),\n  fieldOptions: z.array(z.object({\n    value: z.string(),\n    label: z.string(),\n  })).optional(),\n  displayOrder: z.number().optional(),\n});\n\nconst updateCustomFieldSchema = z.object({\n  label: z.string().optional(),\n  isRequired: z.boolean().optional(),\n  validationRules: z.record(z.any()).optional(),\n  fieldOptions: z.array(z.object({\n    value: z.string(),\n    label: z.string(),\n  })).optional(),\n  displayOrder: z.number().optional(),\n  isActive: z.boolean().optional(),\n});\n\nconst createWorkflowStateSchema = z.object({\n  workflowType: z.enum(['transaction', 'offering', 'customer']),\n  name: z.string().min(1, 'State name is required'),\n  displayName: z.string().min(1, 'Display name is required'),\n  stateType: z.enum(['initial', 'intermediate', 'final']),\n  color: z.string().optional(),\n  description: z.string().optional(),\n  displayOrder: z.number().optional(),\n});\n\nconst businessConfigurationSchema = z.object({\n  businessTypeId: z.string().min(1, 'Business type ID is required'),\n  terminologyOverrides: z.record(z.string()).optional(),\n  configurationOverrides: z.record(z.any()).optional(),\n  customFields: z.array(z.object({\n    entityType: z.string(),\n    name: z.string(),\n    label: z.string(),\n    fieldType: z.string(),\n    isRequired: z.boolean(),\n    validationRules: z.record(z.any()).optional(),\n    fieldOptions: z.array(z.any()).optional(),\n    defaultValue: z.any().optional(),\n  })).optional(),\n  workflowCustomizations: z.array(z.object({\n    workflowType: z.string(),\n    states: z.array(z.object({\n      name: z.string(),\n      displayName: z.string(),\n      stateType: z.string(),\n      color: z.string(),\n      description: z.string().optional(),\n    })),\n  })).optional(),\n});\n\n// Apply middleware\nrouter.use(jwtAuthMiddleware);\nrouter.use(tenantContextMiddleware);\n\n// ===== TENANT BUSINESS CONFIGURATION =====\n\n/**\n * GET /api/business-config\n * Get tenant business configuration\n */\nrouter.get('/', rbacMiddleware(['tenant:read']), async (req, res) => {\n  try {\n    initServices();\n    const tenantId = req.tenantContext?.tenantId;\n    \n    if (!tenantId) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'TENANT_CONTEXT_MISSING',\n          message: 'Tenant context is required',\n        },\n      });\n    }\n\n    const result = await configService.getTenantBusinessConfig(tenantId);\n    \n    if (!result.success) {\n      return res.status(404).json(result);\n    }\n\n    res.json(result);\n  } catch (error) {\n    console.error('Error getting tenant business config:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to get business configuration',\n      },\n    });\n  }\n});\n\n/**\n * POST /api/business-config/setup\n * Setup tenant business type\n */\nrouter.post('/setup', rbacMiddleware(['tenant:write']), async (req, res) => {\n  try {\n    initServices();\n    const tenantId = req.tenantContext?.tenantId;\n    \n    if (!tenantId) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'TENANT_CONTEXT_MISSING',\n          message: 'Tenant context is required',\n        },\n      });\n    }\n\n    const validation = setupBusinessTypeSchema.safeParse(req.body);\n    if (!validation.success) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid request data',\n          details: validation.error.errors,\n        },\n      });\n    }\n\n    const result = await configService.setupBusinessType(tenantId, validation.data);\n    \n    if (!result.success) {\n      return res.status(400).json(result);\n    }\n\n    res.status(201).json(result);\n  } catch (error) {\n    console.error('Error setting up business type:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to setup business type',\n      },\n    });\n  }\n});\n\n/**\n * PUT /api/business-config\n * Configure tenant business\n */\nrouter.put('/', rbacMiddleware(['tenant:write']), async (req, res) => {\n  try {\n    initServices();\n    const tenantId = req.tenantContext?.tenantId;\n    \n    if (!tenantId) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'TENANT_CONTEXT_MISSING',\n          message: 'Tenant context is required',\n        },\n      });\n    }\n\n    const validation = businessConfigurationSchema.safeParse(req.body);\n    if (!validation.success) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid request data',\n          details: validation.error.errors,\n        },\n      });\n    }\n\n    const result = await configService.configureTenantBusiness(tenantId, validation.data);\n    \n    if (!result.success) {\n      return res.status(400).json(result);\n    }\n\n    res.json(result);\n  } catch (error) {\n    console.error('Error configuring tenant business:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to configure business',\n      },\n    });\n  }\n});\n\n/**\n * POST /api/business-config/from-template/:templateId\n * Configure tenant from business type template\n */\nrouter.post('/from-template/:templateId', rbacMiddleware(['tenant:write']), async (req, res) => {\n  try {\n    initServices();\n    const tenantId = req.tenantContext?.tenantId;\n    const { templateId } = req.params;\n    \n    if (!tenantId) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'TENANT_CONTEXT_MISSING',\n          message: 'Tenant context is required',\n        },\n      });\n    }\n\n    const customizations = req.body || {};\n    const result = await configService.configureTenantFromTemplate(tenantId, templateId, customizations);\n    \n    if (!result.success) {\n      return res.status(400).json(result);\n    }\n\n    res.status(201).json(result);\n  } catch (error) {\n    console.error('Error configuring tenant from template:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to configure from template',\n      },\n    });\n  }\n});\n\n/**\n * PUT /api/business-config/terminology\n * Update tenant terminology\n */\nrouter.put('/terminology', rbacMiddleware(['tenant:write']), async (req, res) => {\n  try {\n    initServices();\n    const tenantId = req.tenantContext?.tenantId;\n    \n    if (!tenantId) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'TENANT_CONTEXT_MISSING',\n          message: 'Tenant context is required',\n        },\n      });\n    }\n\n    const validation = updateTerminologySchema.safeParse(req.body);\n    if (!validation.success) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid request data',\n          details: validation.error.errors,\n        },\n      });\n    }\n\n    const result = await configService.updateTerminology(tenantId, validation.data);\n    \n    if (!result.success) {\n      return res.status(400).json(result);\n    }\n\n    res.json(result);\n  } catch (error) {\n    console.error('Error updating terminology:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to update terminology',\n      },\n    });\n  }\n});\n\n/**\n * DELETE /api/business-config\n * Reset tenant business configuration\n */\nrouter.delete('/', rbacMiddleware(['tenant:write']), async (req, res) => {\n  try {\n    initServices();\n    const tenantId = req.tenantContext?.tenantId;\n    \n    if (!tenantId) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'TENANT_CONTEXT_MISSING',\n          message: 'Tenant context is required',\n        },\n      });\n    }\n\n    const result = await configService.resetTenantBusinessConfig(tenantId);\n    \n    if (!result.success) {\n      return res.status(400).json(result);\n    }\n\n    res.json(result);\n  } catch (error) {\n    console.error('Error resetting business config:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to reset business configuration',\n      },\n    });\n  }\n});\n\n/**\n * POST /api/business-config/validate\n * Validate business configuration\n */\nrouter.post('/validate', rbacMiddleware(['tenant:read']), async (req, res) => {\n  try {\n    initServices();\n    const tenantId = req.tenantContext?.tenantId;\n    \n    if (!tenantId) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'TENANT_CONTEXT_MISSING',\n          message: 'Tenant context is required',\n        },\n      });\n    }\n\n    const validation = businessConfigurationSchema.safeParse(req.body);\n    if (!validation.success) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid request data',\n          details: validation.error.errors,\n        },\n      });\n    }\n\n    const result = await configService.validateConfiguration(tenantId, validation.data);\n    \n    res.json({\n      success: true,\n      data: result,\n    });\n  } catch (error) {\n    console.error('Error validating configuration:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to validate configuration',\n      },\n    });\n  }\n});\n\n/**\n * GET /api/business-config/recommendations/:businessTypeId\n * Get configuration recommendations\n */\nrouter.get('/recommendations/:businessTypeId', rbacMiddleware(['tenant:read']), async (req, res) => {\n  try {\n    initServices();\n    const tenantId = req.tenantContext?.tenantId;\n    const { businessTypeId } = req.params;\n    \n    if (!tenantId) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'TENANT_CONTEXT_MISSING',\n          message: 'Tenant context is required',\n        },\n      });\n    }\n\n    const result = await configService.getConfigurationRecommendations(tenantId, businessTypeId);\n    \n    if (!result.success) {\n      return res.status(404).json(result);\n    }\n\n    res.json(result);\n  } catch (error) {\n    console.error('Error getting configuration recommendations:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to get recommendations',\n      },\n    });\n  }\n});\n\n/**\n * GET /api/business-config/migration-status\n * Get migration status for tenant\n */\nrouter.get('/migration-status', rbacMiddleware(['tenant:read']), async (req, res) => {\n  try {\n    initServices();\n    const tenantId = req.tenantContext?.tenantId;\n    \n    if (!tenantId) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'TENANT_CONTEXT_MISSING',\n          message: 'Tenant context is required',\n        },\n      });\n    }\n\n    const result = await configService.getMigrationStatus(tenantId);\n    \n    if (!result.success) {\n      return res.status(400).json(result);\n    }\n\n    res.json(result);\n  } catch (error) {\n    console.error('Error getting migration status:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to get migration status',\n      },\n    });\n  }\n});\n\n// ===== CUSTOM FIELDS MANAGEMENT =====\n\n/**\n * POST /api/business-config/custom-fields\n * Create custom field\n */\nrouter.post('/custom-fields', rbacMiddleware(['tenant:write']), async (req, res) => {\n  try {\n    initServices();\n    const tenantId = req.tenantContext?.tenantId;\n    \n    if (!tenantId) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'TENANT_CONTEXT_MISSING',\n          message: 'Tenant context is required',\n        },\n      });\n    }\n\n    const validation = createCustomFieldSchema.safeParse(req.body);\n    if (!validation.success) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid request data',\n          details: validation.error.errors,\n        },\n      });\n    }\n\n    const result = await configService.createCustomField(tenantId, validation.data);\n    \n    if (!result.success) {\n      return res.status(400).json(result);\n    }\n\n    res.status(201).json(result);\n  } catch (error) {\n    console.error('Error creating custom field:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to create custom field',\n      },\n    });\n  }\n});\n\n/**\n * PUT /api/business-config/custom-fields/:fieldId\n * Update custom field\n */\nrouter.put('/custom-fields/:fieldId', rbacMiddleware(['tenant:write']), async (req, res) => {\n  try {\n    initServices();\n    const tenantId = req.tenantContext?.tenantId;\n    const { fieldId } = req.params;\n    \n    if (!tenantId) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'TENANT_CONTEXT_MISSING',\n          message: 'Tenant context is required',\n        },\n      });\n    }\n\n    const validation = updateCustomFieldSchema.safeParse(req.body);\n    if (!validation.success) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid request data',\n          details: validation.error.errors,\n        },\n      });\n    }\n\n    const result = await configService.updateCustomField(tenantId, fieldId, validation.data);\n    \n    if (!result.success) {\n      return res.status(400).json(result);\n    }\n\n    res.json(result);\n  } catch (error) {\n    console.error('Error updating custom field:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to update custom field',\n      },\n    });\n  }\n});\n\n/**\n * DELETE /api/business-config/custom-fields/:fieldId\n * Delete custom field\n */\nrouter.delete('/custom-fields/:fieldId', rbacMiddleware(['tenant:write']), async (req, res) => {\n  try {\n    initServices();\n    const tenantId = req.tenantContext?.tenantId;\n    const { fieldId } = req.params;\n    \n    if (!tenantId) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'TENANT_CONTEXT_MISSING',\n          message: 'Tenant context is required',\n        },\n      });\n    }\n\n    const result = await configService.deleteCustomField(tenantId, fieldId);\n    \n    if (!result.success) {\n      return res.status(400).json(result);\n    }\n\n    res.json(result);\n  } catch (error) {\n    console.error('Error deleting custom field:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to delete custom field',\n      },\n    });\n  }\n});\n\n/**\n * GET /api/business-config/custom-fields/:entityType\n * Get custom fields by entity type\n */\nrouter.get('/custom-fields/:entityType', rbacMiddleware(['tenant:read']), async (req, res) => {\n  try {\n    initServices();\n    const tenantId = req.tenantContext?.tenantId;\n    const { entityType } = req.params;\n    \n    if (!tenantId) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'TENANT_CONTEXT_MISSING',\n          message: 'Tenant context is required',\n        },\n      });\n    }\n\n    const result = await configService.getCustomFieldsByEntityType(tenantId, entityType);\n    \n    if (!result.success) {\n      return res.status(400).json(result);\n    }\n\n    res.json(result);\n  } catch (error) {\n    console.error('Error getting custom fields:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to get custom fields',\n      },\n    });\n  }\n});\n\n// ===== WORKFLOW STATES MANAGEMENT =====\n\n/**\n * POST /api/business-config/workflow-states\n * Create workflow state\n */\nrouter.post('/workflow-states', rbacMiddleware(['tenant:write']), async (req, res) => {\n  try {\n    initServices();\n    const tenantId = req.tenantContext?.tenantId;\n    \n    if (!tenantId) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'TENANT_CONTEXT_MISSING',\n          message: 'Tenant context is required',\n        },\n      });\n    }\n\n    const validation = createWorkflowStateSchema.safeParse(req.body);\n    if (!validation.success) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid request data',\n          details: validation.error.errors,\n        },\n      });\n    }\n\n    const result = await configService.createWorkflowState(tenantId, validation.data);\n    \n    if (!result.success) {\n      return res.status(400).json(result);\n    }\n\n    res.status(201).json(result);\n  } catch (error) {\n    console.error('Error creating workflow state:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to create workflow state',\n      },\n    });\n  }\n});\n\n/**\n * PUT /api/business-config/workflow-states/:stateId\n * Update workflow state\n */\nrouter.put('/workflow-states/:stateId', rbacMiddleware(['tenant:write']), async (req, res) => {\n  try {\n    initServices();\n    const tenantId = req.tenantContext?.tenantId;\n    const { stateId } = req.params;\n    \n    if (!tenantId) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'TENANT_CONTEXT_MISSING',\n          message: 'Tenant context is required',\n        },\n      });\n    }\n\n    const validation = updateCustomFieldSchema.safeParse(req.body); // Reuse schema for similar fields\n    if (!validation.success) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'VALIDATION_ERROR',\n          message: 'Invalid request data',\n          details: validation.error.errors,\n        },\n      });\n    }\n\n    const result = await configService.updateWorkflowState(tenantId, stateId, validation.data);\n    \n    if (!result.success) {\n      return res.status(400).json(result);\n    }\n\n    res.json(result);\n  } catch (error) {\n    console.error('Error updating workflow state:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to update workflow state',\n      },\n    });\n  }\n});\n\n/**\n * GET /api/business-config/workflow-states/:workflowType\n * Get workflow states by type\n */\nrouter.get('/workflow-states/:workflowType', rbacMiddleware(['tenant:read']), async (req, res) => {\n  try {\n    initServices();\n    const tenantId = req.tenantContext?.tenantId;\n    const { workflowType } = req.params;\n    \n    if (!tenantId) {\n      return res.status(400).json({\n        success: false,\n        error: {\n          code: 'TENANT_CONTEXT_MISSING',\n          message: 'Tenant context is required',\n        },\n      });\n    }\n\n    const result = await configService.getWorkflowStatesByType(tenantId, workflowType);\n    \n    if (!result.success) {\n      return res.status(400).json(result);\n    }\n\n    res.json(result);\n  } catch (error) {\n    console.error('Error getting workflow states:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to get workflow states',\n      },\n    });\n  }\n});\n\n// ===== BUSINESS TYPES MANAGEMENT =====\n\n/**\n * GET /api/business-config/business-types\n * List available business types\n */\nrouter.get('/business-types', rbacMiddleware(['tenant:read']), async (req, res) => {\n  try {\n    initServices();\n    \n    const page = parseInt(req.query.page as string) || 1;\n    const limit = parseInt(req.query.limit as string) || 50;\n    const category = req.query.category as string;\n    const search = req.query.search as string;\n\n    const result = await businessTypeService.listBusinessTypes({\n      page,\n      limit,\n      category,\n      search,\n    });\n    \n    if (!result.success) {\n      return res.status(400).json(result);\n    }\n\n    res.json(result);\n  } catch (error) {\n    console.error('Error listing business types:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to list business types',\n      },\n    });\n  }\n});\n\n/**\n * GET /api/business-config/business-types/:id\n * Get business type by ID\n */\nrouter.get('/business-types/:id', rbacMiddleware(['tenant:read']), async (req, res) => {\n  try {\n    initServices();\n    const { id } = req.params;\n\n    const result = await businessTypeService.getBusinessType(id);\n    \n    if (!result.success) {\n      return res.status(404).json(result);\n    }\n\n    res.json(result);\n  } catch (error) {\n    console.error('Error getting business type:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to get business type',\n      },\n    });\n  }\n});\n\n/**\n * GET /api/business-config/business-types/templates\n * List business type templates\n */\nrouter.get('/business-types/templates', rbacMiddleware(['tenant:read']), async (req, res) => {\n  try {\n    initServices();\n    \n    const category = req.query.category as string;\n\n    const result = await businessTypeService.listBusinessTypeTemplates({ category });\n    \n    if (!result.success) {\n      return res.status(400).json(result);\n    }\n\n    res.json(result);\n  } catch (error) {\n    console.error('Error listing business type templates:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to list business type templates',\n      },\n    });\n  }\n});\n\n/**\n * GET /api/business-config/business-types/templates/:id\n * Get business type template by ID\n */\nrouter.get('/business-types/templates/:id', rbacMiddleware(['tenant:read']), async (req, res) => {\n  try {\n    initServices();\n    const { id } = req.params;\n\n    const result = await businessTypeService.getBusinessTypeTemplate(id);\n    \n    if (!result.success) {\n      return res.status(404).json(result);\n    }\n\n    res.json(result);\n  } catch (error) {\n    console.error('Error getting business type template:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to get business type template',\n      },\n    });\n  }\n});\n\n// ===== ADMIN ROUTES =====\n\n/**\n * GET /api/business-config/admin/configured-tenants\n * Get all configured tenants (admin only)\n */\nrouter.get('/admin/configured-tenants', rbacMiddleware(['admin:read']), async (req, res) => {\n  try {\n    initServices();\n\n    const result = await configService.getConfiguredTenants();\n    \n    if (!result.success) {\n      return res.status(400).json(result);\n    }\n\n    res.json(result);\n  } catch (error) {\n    console.error('Error getting configured tenants:', error);\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Failed to get configured tenants',\n      },\n    });\n  }\n});\n\nexport default router;"